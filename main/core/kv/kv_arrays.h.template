/*
 * Copyright (C) 2019  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef KV_ARRAY_H_
#define KV_ARRAY_H_

#include <stdint.h>

<% Object.keys(modules).filter((m) => modules[m].enabled).filter(m => modules[m].array_len).forEach(m => {
  m = modules[m]
  Object.keys(m.fields).forEach(f => { 
    f = m.fields[f]
    i = parseInt(f.name.split('_')[1]) %>
    <% if (f.write_cb) { %>
      int on_set_<%= m.field_prefix %>_<%= f.suffix %>(int value);
    <% } %>
<% })}) %>

<% 
  const arrays = Object.keys(modules).filter((m) => modules[m].enabled)
                       .filter(m => modules[m].array_len > 0)
                       .reduce((acc, m) => {
                          const name = modules[m].field_prefix
                          acc[name] = acc[name] || {name, array_len: modules[m].array_len, fields: {}}
                          Object.keys(modules[m].fields)
                                .filter(f => modules[m].fields[f].type == 'integer')
                                .forEach((f) => {
                                  f = modules[m].fields[f]
                                  p = f.name.split('_')
                                  p.splice(0, 2)
                                  p = p.join('_')
                                  acc[name].fields[p] = {name: p, intlen: f.intlen, signedness: f.signedness}
                                })
                          return acc
                       }, {})

  Object.keys(arrays).forEach(a => { a = arrays[a]
%>
  #define N_<%= a.name.toUpperCase() %> <%= a.array_len %>
<%    Object.keys(a.fields).forEach(f => { f = a.fields[f]
%>
  <%= f.signedness %>int<%= f.intlen %>_t get_<%= a.name %>_<%= f.name %>(int i);
  void set_<%= a.name %>_<%= f.name %>(int i, <%= f.signedness %>int<%= f.intlen %>_t v);
<% })}) %>

#endif
